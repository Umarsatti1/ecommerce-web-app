name: Deploying E-Commerce Application using CI/CD

on:
  workflow_dispatch:  # Manually trigger the workflow from GitHub Actions UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04  # GitHub-hosted runner for building

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (for frontend build)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Build the frontend
      - name: Build Frontend
        working-directory: frontend  # Frontend directory
        run: |
          npm install  # Install dependencies
          npm run build  # Build the frontend (outputs to frontend/dist)

      # Step 4: Verify Frontend Build
      - name: Verify Frontend Build
        run: |
          ls -la frontend/dist || echo "Frontend build failed!"

      # Step 5: Set up .NET for backend build
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Step 6: Build and publish the backend
      - name: Build Backend
        working-directory: backend
        run: |
          dotnet publish -c Release -o ./out

      # Step 7: Verify Backend Build
      - name: Verify Backend Build
        run: |
          ls -la backend/out || echo "Backend build failed!"

      # Step 8: Build Docker Image
      - name: Build Docker Image
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          docker build --no-cache -t ecommerce-app .

      # Step 9: Deploy to EC2 instance
      - name: Deploy to EC2 Instance
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          # Start the SSH agent
          eval $(ssh-agent -s)
          
          # Remove problematic carriage returns and load the key
          echo "$EC2_PRIVATE_KEY" | sed 's/\r$//' | ssh-add - 

          # Ensure the .ssh directory exists with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Skip host key checking for convenience
          echo -e "Host $EC2_HOST\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

          # SSH into the EC2 instance and deploy the application
          ssh ubuntu@$EC2_HOST << 'EOF'
            cd /home/ubuntu/ecommerce-web-app || git clone https://github.com/Umarsatti1/ecommerce-web-app.git /home/ubuntu/ecommerce-web-app
            cd /home/ubuntu/ecommerce-web-app

            # Reset and pull latest code
            git reset --hard
            git clean -fd
            git pull origin main

            # Stop and remove any existing containers
            sudo docker stop ecommerce-container || true
            sudo docker rm ecommerce-container || true

            # Prune unused Docker images and system
            sudo docker image prune -af
            sudo docker system prune -a -f

            # Build and run the new Docker container with DB connection
            sudo docker build --no-cache -t ecommerce-app .
            sudo docker run -d --name ecommerce-container -p 80:8080 -e DB_CONNECTION_STRING=$DB_CONNECTION_STRING ecommerce-app

            # Verify the running container
            sudo docker ps
          EOF
