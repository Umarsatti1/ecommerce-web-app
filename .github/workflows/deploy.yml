name: Deploy E-Commerce App with ALB and Auto Scaling Group

on:
  workflow_dispatch: # Allows manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (for frontend build)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Build the frontend
      - name: Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      # Step 4: Authenticate AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t ecommerce-app .

      # Step 6: Update Launch Template with User Data
      - name: Update Launch Template User Data
        env:
          DATABASE_CONNECTION_STRING: ${{ secrets.DATABASE_CONNECTION_STRING }}
        run: |
          # Generate User Data script
          USER_DATA=$(cat <<EOF
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          systemctl start docker
          systemctl enable docker
          export DATABASE_CONNECTION_STRING=${DATABASE_CONNECTION_STRING}
          cd /home/ubuntu || mkdir -p /home/ubuntu && cd /home/ubuntu
          git clone https://github.com/Umarsatti1/ecommerce-web-app.git || true
          cd ecommerce-web-app
          git pull origin main
          docker stop ecommerce-container || true
          docker rm ecommerce-container || true
          docker system prune -a -f
          docker build -t ecommerce-app .
          docker run -d --name ecommerce-container -p 8080:8080 ecommerce-app
          EOF
                    )

          # Encode the User Data script as base64
          ENCODED_USER_DATA=$(echo "$USER_DATA" | base64 | tr -d '\n')

          # Update Launch Template
          aws ec2 create-launch-template-version \
            --launch-template-id lt-028e5e8facc4e3f84 \
            --source-version 1 \
            --launch-template-data "{\"UserData\":\"$ENCODED_USER_DATA\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text > new_version.txt

          # Mark the new version as the default
          NEW_VERSION=$(cat new_version.txt)
          aws ec2 modify-launch-template \
            --launch-template-id lt-028e5e8facc4e3f84 \
            --default-version $NEW_VERSION

      # Step 7: Refresh Auto Scaling Group Instances
      - name: Refresh ASG Instances
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ecommerce-asg
